[
	{
	//基于python build sublimeREPL
	"keys":["f1"], 
	"caption": "SublimeREPL: Python - RUN current file",//在界面显示快捷键
	"command": "run_existing_window_command", //控制台中，使用sublime。log_commands(True),在使用命令之后可以看到命令的参数
	"args": {"id": "repl_python_run","file": "config/Python/Main.sublime-menu"} 
	},
	{
	//基于python build sublimeREPL
		"keys":["f8"],
		"command":"run_existing_window_command",
		"args":{"id": "repl_python_pdb","file": "config/Python/Main.sublime-menu"}
	},
	{
	//基于python build sublimeREPL
	"keys":["f5"],
	"caption": "SublimeREPL: IPython",
	"command": "run_existing_window_command", 
	"args": {"id": "repl_python_ipython","file": "config/Python/Main.sublime-menu"}
	},


	//vim模式下的快捷方式
	{ 
		"keys": ["k", "j"], 
		"command": "exit_insert_mode",
    	"context":
    		[
        		{ "key": "setting.command_mode", "operand": false },
        		{ "key": "setting.is_widget", "operand": false }
    		]
    },//①

    { 
    	"keys": ["ctrl+l"], "command": "move", 
    	"args": {"by": "characters", "forward": true} 
    },//②

    { 
    	"keys": ["ctrl+j"], "command": "commit_completion", "context":
	        [
	            { "key": "auto_complete_visible" },
	            { "key": "setting.auto_complete_commit_on_tab", "operand": false }
	        ]
    },//③


    //1、表示的是使用 k+j 来实现退出插入模式。因为之前在使用vim的时候，就习惯这样的定义，所以就将之映射成这样。当然，也可以定义成其他方便的按键组合。

    //2、实现光标右移一位。

    //3、存在自动补全的选择是，使用ctrl+j 就可以进行选择。这也是之前是用vim时的快捷键。

    //这也看来，我们通过Key Bindings-User，就可以很方便的定义自己的快捷键。那如何找到一些操作对应的代码？额，我是自己看Key Bindings-Default中的表述，一般都是对应的英文，比如auto_complete_visible。再者，就是通过已知的按键，去找，比如esc表示退出插入模式，就找esc。。。


    {
    	//anaconda 功能开启快捷键
    	"command": "anaconda_goto", 
    	"keys": ["ctrl+alt+g"],
    	"context": [
    		{
    			"key": "selector",
    			"operator": "equal", 
    			"operand": "source.python"
    		}
    	]
    },

    //enter 跳出补全的括号外
    // {"keys": ["tab+enter"],
    //         "command": "move",
    //         "args": {"by": "characters", "forward": true}, 
    //         "context":  
    //                 [  
    //                     { "key": "following_text",
    //                      "operator": "regex_contains",
    //                       "operand": "^[)\\]\\>\\'\\\"\\ %>\\}\\;\\,]", "match_all": true },  
    //                     { "key": "preceding_text", "operator": "not_regex_match", "operand": "^.*\\{$", "match_all": true  },  
    //                     { "key": "auto_complete_visible", "operator": "equal", "operand": false }  
    //                 ]  
    // },
    //使用[ 进入括号中 再次输入] 跳出括号外
]

